<div class="auth-wrapper">
    <div class="card shadow-sm auth-card">
        <div class="card-body p-4 p-md-5">
            <h1 class="h3 mb-2">Olvidé mi contraseña</h1>
            <p class="text-secondary small mb-4">
                Ingresá tu email y te enviaremos un enlace para restablecerla. El enlace es válido por <b>1 hora</b>.
            </p>

            <form id="forgotForm" class="auth-form" novalidate>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input id="email" name="email" type="email" class="form-control" placeholder="tucorreo@ejemplo.com"
                        autocomplete="email" required />
                    <div class="invalid-feedback">Ingresá un email válido.</div>
                </div>
                <div class="d-grid gap-2 mt-3 auth-actions">
                    <button type="submit" class="btn-send-link">Enviar enlace</button>
                    <a href="/login" class="btn-back-to-login">← Volver al inicio de sesión</a>
                </div>
            </form>

        </div>
    </div>
</div>

<script>
    (function () {
        const form = document.getElementById('forgotForm');
        const emailInput = document.getElementById('email');
        const submitBtn = form.querySelector('button[type="submit"]');

        function setValidity(ok) {
            if (ok) emailInput.classList.remove('is-invalid');
            else emailInput.classList.add('is-invalid');
        }

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const email = emailInput.value.trim();
            const valid = email && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
            setValidity(valid);
            if (!valid) return;

            submitBtn.disabled = true;

            const hasSwal = typeof Swal !== 'undefined';
            if (hasSwal) {
                Swal.fire({
                    title: 'Enviando enlace…',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    didOpen: () => Swal.showLoading(),
                });
            }

            try {
                const res = await fetch('/api/password/forgot', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                    body: JSON.stringify({ email })
                });

                const data = await res.json().catch(() => ({}));
                if (hasSwal) Swal.close();

                if (res.ok && (data.status === 'success' || data.message)) {
                    if (hasSwal) {
                        await Swal.fire({
                            icon: 'success',
                            title: '¡Listo!',
                            html: 'Te enviamos un enlace válido por <b>1 hora</b>.<br>Revisá tu bandeja de entrada (y spam).',
                            confirmButtonText: 'Ir al login',
                            confirmButtonColor: '#333'
                        });
                    } else {
                        alert(data.message || 'Si el correo existe, se envió un enlace.');
                    }
                    window.location.href = '/login';
                } else {
                    if (hasSwal) {
                        Swal.fire('No se pudo enviar', data.message || 'Intentá nuevamente en unos minutos.', 'error');
                    } else {
                        alert(data.message || 'No se pudo enviar. Intentá nuevamente.');
                    }
                }
            } catch (err) {
                console.error(err);
                if (hasSwal) {
                    Swal.close();
                    Swal.fire('Error de red', 'Verificá tu conexión e intentá nuevamente.', 'error');
                } else {
                    alert('Error de red. Intentá nuevamente.');
                }
            } finally {
                submitBtn.disabled = false;
            }
        });
    })();
</script>