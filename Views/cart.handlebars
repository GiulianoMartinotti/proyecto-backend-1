<h1 class="cart-title">Carrito de compras</h1>

{{#if products.length}}
<div class="cart-grid">

    <div class="cart-products">
        <ul class="cart-list">
            {{#each products}}
            <li class="cart-item">
                <div class="cart-item-info">
                    <h3 class="cart-item-title">{{title}}</h3>
                    <p>Descripci√≥n: {{description}}</p>
                    <p>Precio: ${{price}}</p>
                    <p>Categor√≠a: {{category}}</p>
                    <p class="quantity">Cantidad: {{quantity}}</p>
                </div>
                {{#if ../user}}
                {{#if ../cartId}}
                <form class="delete-form" data-product-id="{{_id}}">
                    <button type="submit" class="delete-btn">‚ùå Eliminar Producto</button>
                </form>
                {{else}}
                <p><em>No hay carrito activo.</em></p>
                {{/if}}
                {{else}}
                <p><em>Inicia sesi√≥n para modificar tu carrito.</em></p>
                {{/if}}
            </li>
            {{/each}}
        </ul>
    </div>

    <div class="cart-summary">
        <h2>Resumen del pedido</h2>
        <p class="cart-total"><strong>Total ({{totalQuantity}} productos):</strong> {{total}}</p>

        {{#if user}}
        {{#if cartId}}
        <form id="clear-cart-form" action="/api/carts/{{cartId}}" method="POST">
            <button id="clear-cart-btn" type="button" class="clear-cart-btn">üóëÔ∏è Vaciar carrito</button>
        </form>
        {{/if}}
        {{else}}
        <p><em>Inicia sesi√≥n para vaciar el carrito o finalizar la compra.</em></p>
        {{/if}}

        <button class="checkout-btn" {{#unless user}}disabled title="Inicia sesi√≥n para comprar" {{/unless}} {{#unless
            products.length}}disabled{{/unless}}>
            üõçÔ∏è Finalizar compra
        </button>
    </div>
</div>
{{else}}
<p class="empty-cart">
    {{#if message}}{{message}}{{else}}El carrito est√° vac√≠o.{{/if}}
</p>
{{/if}}

<a href="/" class="back-button">‚Üê Volver a productos</a>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const cid = "{{cartId}}";
        const isLoggedIn = {{#if user}}true{{ else}}false{{/if}};


    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 1800,
        timerProgressBar: true
    });

    if (!isLoggedIn || !cid) return;

    // Eliminar producto
    document.querySelectorAll('.delete-form').forEach(form => {
        form.addEventListener('submit', async e => {
            e.preventDefault();
            const pid = form.dataset.productId;

            const ask = await Swal.fire({
                title: '¬øEliminar este producto?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'S√≠, eliminar',
                confirmButtonColor: '#820000',
                cancelButtonText: 'Cancelar',
                cancelButtonColor: 'black'
            });
            if (!ask.isConfirmed) return;

            try {
                const res = await fetch(`/api/carts/${cid}/products/${pid}`, { method: 'DELETE' });
                const data = await res.json();
                if (res.ok && data.status === 'success') {
                    await Toast.fire({ icon: 'success', title: 'Producto eliminado' });
                    location.reload();
                } else {
                    Swal.fire('Error', data.message || 'No se pudo eliminar', 'error');
                }
            } catch (err) {
                console.error(err);
                Swal.fire('Error de red', 'Intenta nuevamente', 'error');
            }
        });
    });

    // Vaciar carrito
    const clearBtn = document.getElementById('clear-cart-btn');
    if (clearBtn) {
        clearBtn.addEventListener('click', async () => {
            const ask = await Swal.fire({
                title: '¬øVaciar carrito?',
                text: 'Esta acci√≥n no se puede deshacer',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Vaciar',
                confirmButtonColor: '#820000',
                cancelButtonText: 'Cancelar',
                cancelButtonColor: 'black'
            });
            if (!ask.isConfirmed) return;

            try {
                const res = await fetch(`/api/carts/${cid}`, { method: 'DELETE' });
                const data = await res.json();
                if (res.ok && data.status === 'success') {
                    await Toast.fire({ icon: 'success', title: 'Carrito vaciado' });
                    location.reload();
                } else {
                    Swal.fire('Error', data.message || 'No se pudo vaciar', 'error');
                }
            } catch (err) {
                console.error(err);
                Swal.fire('Error de red', 'Intenta nuevamente', 'error');
            }
        });
    }

    // Finalizar compra
    const checkoutBtn = document.querySelector('.checkout-btn');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', async () => {
            let timerInterval;
            try {
                checkoutBtn.disabled = true;

                
                await Swal.fire({
                    title: 'Procesando compra‚Ä¶',
                    timer: 5000,                 
                    timerProgressBar: true,
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    didOpen: () => {
                        Swal.showLoading();
                        const b = Swal.getHtmlContainer().querySelector('b');
                        timerInterval = setInterval(() => {
                            const left = Swal.getTimerLeft();
                            if (left != null) b.textContent = Math.ceil(left / 1000) + 's';
                        }, 100);
                    },
                    willClose: () => {
                        clearInterval(timerInterval);
                    }
                });

                // Disparamos la compra mientras el modal est√° abierto
                const res = await fetch(`/api/carts/${cid}/purchase`, { method: 'POST' });
                const data = await res.json();

                // Cerramos el modal (por si no se cerr√≥ por timer)
                Swal.close();

                if (res.ok && data.status === 'success') {
                    // redirige la vista del ticket
                    window.location.href = `/tickets/${data.ticket.code}`;
                } else {
                    const out = data.outOfStock?.length || 0;
                    Swal.fire({
                        icon: 'warning',
                        title: 'No se pudo completar',
                        html: `${data.message || 'Revisa los productos.'}${out ? `<br><small>${out} sin stock</small>` : ''}`
                    });
                }
            } catch (err) {
                console.error(err);
                Swal.close();
                Swal.fire('Error de red', 'Intenta nuevamente', 'error');
            } finally {
                checkoutBtn.disabled = false;
            }
        });
    }
});
</script>