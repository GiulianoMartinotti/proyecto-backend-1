<div class="auth-wrapper">
    <div class="card shadow-sm auth-card">
        <div class="card-body p-4 p-md-5">
            <h1 class="h3 mb-2">Restablecer contrase√±a</h1>
            <p class="text-secondary small mb-4">
                Cre√° una nueva contrase√±a segura. El enlace de reseteo es v√°lido por <b>1 hora</b>.
            </p>

            <form id="resetForm" class="auth-form" novalidate>
                <div class="mb-3">
                    <label for="password" class="form-label">Nueva contrase√±a</label>
                    <div class="input-group">
                        <input id="password" name="password" type="password" class="form-control"
                            placeholder="M√≠nimo 6 caracteres" required minlength="6" autocomplete="new-password" />
                        <button class="btn btn-outline-secondary toggle-pass" type="button"
                            data-target="password">üëÅÔ∏è</button>
                    </div>
                    <div class="invalid-feedback">La contrase√±a debe tener al menos 6 caracteres.</div>
                    <div class="form-text mt-2">
                        Us√° una combinaci√≥n de letras, n√∫meros y s√≠mbolos para mayor seguridad.
                    </div>

                    <div class="progress mt-2 password-meter" role="progressbar" aria-label="Fuerza de contrase√±a"
                        aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-bar" id="pwd-meter" style="width: 0%"></div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="confirm" class="form-label">Confirmaci√≥n</label>
                    <div class="input-group">
                        <input id="confirm" name="confirm" type="password" class="form-control" required
                            autocomplete="new-password" />
                        <button class="btn btn-outline-secondary toggle-pass" type="button"
                            data-target="confirm">üëÅÔ∏è</button>
                    </div>
                    <div class="invalid-feedback">Las contrase√±as no coinciden.</div>
                </div>

                <div class="d-grid gap-2 mt-3 auth-actions">
                    <button type="submit" class="btn-send-link">Cambiar contrase√±a</button>
                    <a href="/login" class="btn-back-to-login">‚Üê Volver al inicio de sesi√≥n</a>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    (() => {
        const params = new URLSearchParams(window.location.search);
        const token = params.get('token');

        // Si falta token, avisamos y redirigimos
        if (!token) {
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: 'Enlace inv√°lido',
                    text: 'El enlace de restablecimiento no es v√°lido.',
                    confirmButtonText: 'Volver a solicitar',
                }).then(() => window.location.href = '/forgot-password');
            } else {
                alert('Enlace inv√°lido'); window.location.href = '/forgot-password';
            }
            return;
        }

        const form = document.getElementById('resetForm');
        const password = document.getElementById('password');
        const confirm = document.getElementById('confirm');
        const meter = document.getElementById('pwd-meter');
        const MIN = 6;

        // Mostrar/ocultar
        document.querySelectorAll('.toggle-pass').forEach(btn => {
            btn.addEventListener('click', () => {
                const target = document.getElementById(btn.dataset.target);
                target.type = target.type === 'password' ? 'text' : 'password';
            });
        });

        // Medidor simple
        function scorePwd(pwd) {
            let s = 0;
            if (pwd.length >= MIN) s += 25;
            if (/[a-z]/.test(pwd) && /[A-Z]/.test(pwd)) s += 25;
            if (/\d/.test(pwd)) s += 25;
            if (/[^\w\s]/.test(pwd)) s += 25;
            return Math.min(100, s);
        }
        function updateMeter() {
            const val = scorePwd(password.value);
            meter.style.width = val + '%';
            meter.classList.remove('bg-danger', 'bg-warning', 'bg-success');
            if (val < 50) meter.classList.add('bg-danger');
            else if (val < 80) meter.classList.add('bg-warning');
            else meter.classList.add('bg-success');
        }
        password.addEventListener('input', updateMeter);
        updateMeter();

        function setValidity(input, ok) {
            if (ok) input.classList.remove('is-invalid');
            else input.classList.add('is-invalid');
        }

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const pwd = password.value.trim();
            const conf = confirm.value.trim();

            const validLen = pwd.length >= MIN;
            setValidity(password, validLen);
            if (!validLen) return;

            const match = pwd === conf;
            setValidity(confirm, match);
            if (!match) return;

            const hasSwal = typeof Swal !== 'undefined';
            if (hasSwal) {
                Swal.fire({
                    title: 'Actualizando‚Ä¶',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    didOpen: () => Swal.showLoading(),
                });
            }

            try {
                const res = await fetch('/api/password/reset', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                    body: JSON.stringify({ token, password: pwd })
                });
                const data = await res.json().catch(() => ({}));

                if (hasSwal) Swal.close();

                if (res.ok && (data.status === 'success' || data.message)) {
                    const msg = data.message || 'Contrase√±a actualizada con √©xito.';
                    if (hasSwal) {
                        await Swal.fire({ icon: 'success', title: '¬°Listo!', text: msg, confirmButtonText: 'Ir a login' });
                    } else {
                        alert(msg);
                    }
                    window.location.href = '/login';
                } else {
                    const msg = data.message || 'No se pudo restablecer la contrase√±a.';
                    if (hasSwal) Swal.fire('No se pudo completar', msg, 'error');
                    else alert(msg);
                }
            } catch (err) {
                console.error(err);
                if (hasSwal) {
                    Swal.close();
                    Swal.fire('Error de red', 'Intenta nuevamente en unos minutos.', 'error');
                } else {
                    alert('Error de red.');
                }
            }
        });
    })();
</script>